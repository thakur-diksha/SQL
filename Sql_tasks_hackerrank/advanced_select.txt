- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

->select
  CASE
    WHEN (A + B <= C) OR (B + C <= A) OR (A + C <= B) THEN 'Not A Triangle'
    WHEN (A = B) AND (B = C) THEN 'Equilateral'
    WHEN ((A = B) AND (A != C)) OR ((B = C) AND (B != A)) OR ((A = C) AND (A != B)) THEN 'Isosceles'
    WHEN (A != B) AND (B != C) AND (A != C) THEN 'Scalene'
  END 
from
  TRIANGLES;

-Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.

->select concat(name, '(', substr(occupation, 1, 1), ')') from occupations order by name; 
select concat('There are a total of', ' ', count(occupation),' ', lower(occupation), 's', '.') from occupations group by occupation order by count(occupation), occupation;

-Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.
Sample Output

Jenny    Ashley     Meera  Jane
Samantha Christeen  Priya  Julia
NULL     Ketty      NULL   Maria
Explanation

The first column is an alphabetically ordered list of Doctor names.
The second column is an alphabetically ordered list of Professor names.
The third column is an alphabetically ordered list of Singer names.
The fourth column is an alphabetically ordered list of Actor names.
The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.

->set @r1 = 0, @r2 = 0, @r3 = 0, @r4 = 0;
select min(DOCTOR_NAMES), min(PROFESSOR_NAMES), min(SINGER_NAMES), min(ACTOR_NAMES)
from(
    select
      CASE when OCCUPATION = 'Doctor' then name END AS DOCTOR_NAMES,
      CASE when OCCUPATION = 'Professor' then name END AS PROFESSOR_NAMES,
      CASE when OCCUPATION = 'Singer' then name END AS SINGER_NAMES,
      CASE when OCCUPATION = 'Actor' then name END AS ACTOR_NAMES,
      CASE
        when OCCUPATION = 'Doctor' then (@r1 := @r1 + 1)
        when OCCUPATION = 'Professor' then (@r2 := @r2 + 1)
        when OCCUPATION = 'Singer' then (@r3 := @r3 + 1)
        when OCCUPATION = 'Actor' then (@r4 := @r4 + 1)
      END AS rno
    from occupations
    order by name
  )as temp
group by rno;

-You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
Sample Output

1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf

->select n, 
  case 
  when p is null then 'Root'
  when n in (select p from bst) then 'Inner'
  else 'Leaf'
  end
 from bst
 order by n;

-Amber's conglomerate corporation just acquired some new companies. Each of the companies follows a hierarchy. 
Write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
Note:
The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.
Input Format

Company: The company_code is the code of the company and founder is the founder of the company. 

Lead_Manager: The lead_manager_code is the code of the lead manager, and the company_code is the code of the working company. 

Senior_Manager: The senior_manager_code is the code of the senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 

Manager: The manager_code is the code of the manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 

Employee: The employee_code is the code of the employee, the manager_code is the code of its manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 

Company Table:  Lead_Manager Table:  Senior_Manager Table:  Manager Table:  Employee Table: 

Sample Output

C1 Monika 1 2 1 2
C2 Samantha 1 1 2 2
Explanation

In company C1, the only lead manager is LM1. There are two senior managers, SM1 and SM2, under LM1. There is one manager, M1, under senior manager SM1. There are two employees, E1 and E2, under manager M1.

In company C2, the only lead manager is LM2. There is one senior manager, SM3, under LM2.

->SELECT
  c.company_code,
  c.founder,
  count(distinct l.lead_manager_code) as no_of_lead_manager,
  count(distinct s.senior_manager_code) as no_of_senior_manager,
  count(distinct m.manager_code) as no_of_manager,
  count(distinct e.employee_code) as no_of_employee
FROM
  Company c
  LEFT JOIN Lead_Manager l ON c.company_code = l.company_code
  LEFT JOIN Senior_Manager s ON c.company_code = s.company_code
  AND l.lead_manager_code = s.lead_manager_code
  LEFT JOIN Manager m ON c.company_code = m.company_code
  AND l.lead_manager_code = m.lead_manager_code
  AND s.senior_manager_code = m.senior_manager_code
  LEFT JOIN Employee e ON c.company_code = e.company_code
  AND l.lead_manager_code = e.lead_manager_code
  AND s.senior_manager_code = e.senior_manager_code
  AND m.manager_code = e.manager_code
GROUP BY
  c.company_code,
  founder
ORDER BY
  c.company_code asc;
