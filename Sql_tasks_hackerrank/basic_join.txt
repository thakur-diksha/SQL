1. Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-> select sum(city.population) 
from country 
INNER JOIN city ON country.code = city.countrycode
where country.continent = 'Asia';


2. Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-> select city.name from city
INNER JOIN country ON city.countrycode = country.Code
where country.continent = 'Africa';
          
or

/*SELECT city.name FROM country 
INNER JOIN city ON country.code = city.countrycode 
WHERE country.continent = 'Africa';*/


3. Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations 
(CITY.Population) rounded down to the nearest integer.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.


-> select country.continent, floor(avg(city.population)) from country
INNER JOIN city on city.countrycode = country.code
group by country.continent;



4. You are given two tables: Students and Grades. Students contains three columns: ID, Name and Marks.
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students 
who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than 
one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.
Note: Print "NULL"  as the name if the grade is less than 8.


-> select CASE 
        WHEN g.grade < 8 THEN null
        ELSE s.name 
    END,
g.grade, s.marks from students s INNER JOIN grades g ON
s.marks BETWEEN g.Min_Mark AND g.Max_Mark
order by g.grade DESC, s.name, s.marks;



5. Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id 
and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges 
in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.
Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the score of the challenge for the difficulty level.
Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the challenge.
Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs 
to, and score is the score of the submission.


-> select h.hacker_id, h.name 
from hackers h INNER JOIN submissions s ON h.hacker_id = s.hacker_id
INNER JOIN challenges c ON s.challenge_id = c.challenge_id
INNER JOIN difficulty d ON c.difficulty_level = d.difficulty_level
where s.score = d.score AND c.difficulty_level = d.difficulty_level
group by h.hacker_id, h.name
HAVING count(*) > 1
order by count(*) DESC, s.hacker_id; 



6. Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of 
high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. 
If more than one wand has same power, sort the result in order of descending age.
Wands: The id is the id of the wand, code is the code of the wand, coins_needed is the total number of gold galleons needed to buy the wand, 
and power denotes the quality of the wand (the higher the power, the better the wand is).
Wands_Property: The code is the code of the wand, age is the age of the wand, and is_evil denotes whether the wand is good for the dark arts. 
If the value of is_evil is 0, it means that the wand is not evil. The mapping between code and age is one-one, meaning that if there are two pairs, (code1,age1) and , (code2,age2) 
then code1≠code2 and age1≠age2.


-> select w.id, wp.age, w.coins_needed, w.power from wands w
INNER JOIN wands_property wp ON w.code = wp.code
where wp.is_evil = 0 
AND w.coins_needed = (select min(coins_needed) from wands x INNER JOIN wands_property y ON x.code = y.code where x.power = w.power AND y.age = wp.age)
order by w.power DESC, wp.age DESC;



7. Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. 
Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. 
If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.
Challenges: The challenge_id is the id of the challenge, and hacker_id is the id of the student who created the challenge. 


-> select h.hacker_id, h.name, count(c.challenge_id) AS chal_count
from hackers h
INNER JOIN challenges c ON c.hacker_id = h.hacker_id
group by h.hacker_id, h.name
HAVING chal_count = 
    (select count(challenge_id) AS max_count
     from challenges
     group by hacker_id 
     order by max_count DESC LIMIT 1)
OR chal_count IN 
    (select DISTINCT ct from (select h2.hacker_id, h2.name, count(challenge_id) AS ct
           from hackers h2
           INNER JOIN challenges c ON c.hacker_id = h2.hacker_id
           group by h2.hacker_id, h2.name) counts
     group by ct
     having count(ct) = 1)
order by chal_count DESC, h.hacker_id;



8. You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!
The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score 
of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. 
Exclude all hackers with a total score of 0 from your result.
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.
Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is 
the id of the challenge for which the submission belongs to, and score is the score of the submission.


-> select h.hacker_id, h.name, sum(maxS)
from Hackers h INNER JOIN (select s.hacker_id,max(score) AS maxS 
                           from Submissions s 
                           group by s.hacker_id,s.challenge_id) st 
                           ON h.hacker_id=st.hacker_id
group by h.hacker_id, h.name
having sum(maxS)>0
order by sum(maxS) desc, h.hacker_id;